#!/bin/bash

# Complete setup for beefproject/beef on $DISTRIB, as follows:
# 1. solve dependencies, rbenv, ruby and ruby dependencies - for ruby 2.3.0 libssl1.0-dev w apt-get 
# 2. solve gcc/g++ versions, running update alternatives script
# 3. git clone && submodule init
# 4. install bundler and gem using $RUBYVERSION_BEEF
# 5. write console launch and desktop files

# For ruby - the script installs rbenv if not installed, same for desired ruby version here after $RUBYVERSION_BEEF - to change the ruby version change 2.3.0 document wide.

sudo chown -R $USER:$USER /opt # chown target clone/install dir

DISTRIB=18.04-bionic_beaver # branch for rbenv installer
# desired ruby version - replace document wide for change
GITREPO=https://github.com/beefproject/beef.git
BRANCH=master
GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject/beef
GITCLONEDIR=/opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject
EXECUTEABLE1=beef.sh
EXECUTEABLE2=beef
BINDIR=/usr/local/bin

DSKTPFLSDEST=/home/$USER/.local/share/applications/3.Exploitation-Tools/5.SE_Phishing/beef
DSKTPFL=beef.desktop

echo "${bold}
 ____  _____ _____ _____ 
| __ )| ____| ____|  ___|
|  _ \|  _| |  _| | |_   
| |_) | |___| |___|  _|  
|____/|_____|_____|_|    
            
INSTALL beefproject/beef
complete setup for $DISTRIB
${normal}"

sudo apt-get update 
sudo apt-get upgrade 
sudo apt-get install libssl1.0-dev # ruby 2.3.0 depends


# symlink startup file
SYMLINKEX2TO1  () {
sudo rm -f $BINDIR/$EXECUTEABLE2
sudo ln -s $GITREPOROOT/$EXECUTEABLE1 $BINDIR/$EXECUTEABLE2
}

# git clone 
GITCLONEFUNC () {
mkdir -p $GITCLONEDIR
cd $GITCLONEDIR
git clone -b $BRANCH $GITREPO
cd $GITREPOROOT
}
# END git clone 

# init submodules
GITSBMDLINIT () {
	git submodule init
	git submodule update --recursive
	sudo updatedb && sudo ldconfig
}
# END init submodules

INST_APTDEPS () {

WEB_DEPS="apache2 
apache2-utils 
php
"
sudo apt-get update
sudo apt-get upgrade

echo $WEB_DEPS | while read webdeps
do
   sudo apt-get install -y $webdeps
done

sudo 

sudo service apache2 stop
sudo systemctl disable apache2.service

sudo updatedb
sudo ldconfig

}

UPDATEALT () {
#!/bin/bash

# 18.04 bionic-beaver
# default 14.5.18 - gcc version 7.3.0 (Ubuntu 7.3.0-16ubuntu3) 

sudo apt-get update 
sudo apt-get upgrade

DEFAULT=40 # 40 for $VERSION4 default gcc/g++ version , 10 - X
VERSION1=4.8
VERSION2=5
VERSION3=6
VERSION4=7
VERSION5=8

sudo apt-get install gcc-4.8 gcc-5 gcc-6 gcc-7 gcc-8 g++-4.8 g++-5 g++-6 g++-7 g++-8


dpkg --list | grep compiler

sudo update-alternatives --remove-all gcc
sudo update-alternatives --remove-all g++

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$VERSION1 10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$VERSION2 20
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$VERSION3 30
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$VERSION4 40
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$VERSION5 50

sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$VERSION1 10
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$VERSION2 20
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$VERSION3 30
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$VERSION4 40
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$VERSION5 50


sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc $DEFAULT
sudo update-alternatives --set cc /usr/bin/gcc

sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ $DEFAULT
sudo update-alternatives --set c++ /usr/bin/g++

yes "0" | sudo update-alternatives --config gcc
yes "0" | sudo update-alternatives --config g++
}

# rbenv install if required
RBENVINST () {
if [ ! -d /home/$USER/.rbenv ]; then
echo "rbenv not installed, installing!"
git clone https://github.com/alphaaurigae/rbenv-ruby_install
cd rbenv-ruby_install
git checkout -b $DISTRIB
./Rbenv-Ruby_Install_GitHub.sh
source ~/.bashrc
fi
}

# check if ruby needs install and run rbenv shell w desired ruby version
RBENVSHLL1 () {

# desired ruby version if runs the test against.
RUBYVERSION_BEEF=2.3.0
# Get if ruby $RUBYVERSION_BEEF is installed. For this purpose we need to run "rbenv versions" and grep for $RUBYVERSION_BEEF - if string is empty == not installed -> install. 
# Additionally clean up the output so "test" command can read it.
RUBYMATCH=`rbenv versions | grep $RUBYVERSION_BEEF |  sed -e 's/\((set by \).*\(.ruby-version)\)/\1\2/' | sed -e 's/(set by .ruby-version)//g' | sed -e 's/*//g' | sed -e 's/ //g'`

echo -e "is ${PURPLE}${bold} ruby $RUBYVERSION_BEEF installed? If not, install!${normal}"

source ~/.bashrc # no idea why its left here, check later

if [[ $RUBYMATCH != $RUBYVERSION_BEEF ]]; then # compare desired ruby with installed ruby, if no perfect match install it using rbenv or skip to proceed setup.

yes "1" | sudo update-alternatives --config gcc
yes "1" | sudo update-alternatives --config g++
echo "${bold} ruby $RUBYVERSION_BEEF is not installed! Installing!${normal}"
yes "Y" | rbenv install $RUBYVERSION_BEEF
yes "0" | sudo update-alternatives --config gcc
yes "0" | sudo update-alternatives --config g++
sudo updatedb
sudo ldconfig

else

echo "${bold} ruby $RUBYVERSION_BEEF is installed! Skipping installation!${normal}"

fi # check if ruby needs install and run rbenv shell w desired ruby version
}

BNDLINST () {
gem install bundler
#bundle
bundle update
bundle install
}

# create startup file
EXEC1_INIT () {
echo '#!/bin/bash

sudo service apache2 start
cd /opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject/beef
./beef "$@"' > $GITREPOROOT/$EXECUTEABLE1
}

# write .desktop files
WRTEDSKTPFLS () {
mkdir -p $DSKTPFLSDEST

echo '
[Desktop Entry]
Name=beef start
Encoding=UTF-8
Exec=sh -c "service beef-xss start;${SHELL:-bash}"
StartupNotify=false
Terminal=true
Type=Application
Categories=5.SE_Phishing;' > $DSKTPFLSDEST/$DSKTPFL
}

INST_APTDEPS # install apt dependencies
GITCLONEFUNC # mkdir, clone, checkout & cd 
GITSBMDLINIT # submodules init
RBENVINST # check if rebenv needs install
UPDATEALT # update alternatives for gcc/g++
RBENVSHLL1 # check if desired ruby is installed, if not install.
BNDLINST # bundler & gem install
EXEC1_INIT # create startup file
chmod +x $GITREPOROOT/$EXECUTEABLE2 # chmod +x main exec
chmod +x $GITREPOROOT/$EXECUTEABLE1 # chmod +x startup file
SYMLINKEX2TO1 # symlink startup file
WRTEDSKTPFLS # write .desktop files