#!/bin/bash -i

## Metasploit-Framework Setup - XFCE, 18.04
# lets install the metasploit-framwork off github with all dependencies and a ready to roll setup.
# scroll to bottom for install routine overview.

sudo chown -R $USER:$USER /opt

DISTRIB=18.04-bionic_beaver # branch for rbenv installer

GITREPO=https://github.com/rapid7/metasploit-framework
BRANCH=master
GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
GITCLONEDIR=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7
EXECUTEABLE1=msfconsole.sh 
EXECUTEABLE2=msfd.sh 
EXECUTEABLE3=msfrpc.sh 
EXECUTEABLE4=msfrpcd.sh
EXECUTEABLE5=msfvenom.sh
EXECUTEABLE6=msfbinscan.sh
EXECUTEABLE7=msfelfscan.sh
EXECUTEABLE8=msfmachscan.sh 
EXECUTEABLE9=msfpescan.sh
EXECUTEABLE10=msfupdate.sh
EXECUTEABLE11=msfconsole
EXECUTEABLE12=msfd
EXECUTEABLE13=msfrpc
EXECUTEABLE14=msfrpcd
EXECUTEABLE15=msfvenom
EXECUTEABLE16=msfbinscan
EXECUTEABLE17=msfelfscan
EXECUTEABLE18=msfmachscan
EXECUTEABLE19=msfpescan
EXECUTEABLE20=msfupdate
BINDIR=/usr/local/bin
DSKTPFLSDEST=/home/$USER/.local/share/applications/3.Exploitation-Tools/metasploit-framework
DSKTPFL1=msfconsole.desktop
DSKTPFL2=msfbinscan.desktop
DSKTPFL3=msfelfscan.desktop
DSKTPFL4=msfmachscan.desktop
DSKTPFL5=msfpescan.desktop
DSKTPFL6=msfrop.desktop
DSKTPFL7=msfvenom.desktop
DSKTPFL8=msfupdate.desktop

POSTGRES_USER="postgres"
MSF_PASS=`cat /dev/urandom |base64 | head -c8`
POSTGRES_PASS=`cat /dev/urandom |base64 | head -c8`
PG_VER=`psql --version | awk '{print $3}' | cut -d. -f1,2`
MSFDBNAME=msf
MSFDBUSRNAME=msf
MSFDBP=msf

bold=$(tput bold)
normal=$(tput sgr0)
CYAN='\e[0;36m'
GREEN='\e[0;32m'
WHITE='\e[0;37m'
RED='\e[0;31m'
YELLOW='\e[0;33m'
BLUE='\e[0;34m'
PURPLE='\e[0;35m'
ORANGE='\e[38;5;166m'

######################## CONFIG_MAIN - END ########################

BANNER () {
	echo "${bold}
	 __  __ _____ _____  _    ____  ____  _     ___ ___ _____ 
	|  \/  | ____|_   _|/ \  / ___||  _ \| |   / _ \_ _|_   _|
	| |\/| |  _|   | | / _ \ \___ \| |_) | |  | | | | |  | |  
	| |  | | |___  | |/ ___ \ ___) |  __/| |__| |_| | |  | |  
	|_|  |_|_____| |_/_/   \_\____/|_|   |_____\___/___| |_|  
		   
	INSTALL
	rapid7/metasploit-framework
	# installation script by alphaaurigae
	${normal}"
}

RBENVINST () { # check if rbenv is installed, if not install
	if [ ! -d /home/$USER/.rbenv ]; then
		echo "rbenv not installed, installing!"
		git clone https://github.com/alphaaurigae/rbenv-ruby_install
		cd rbenv-ruby_install
		git checkout -b $DISTRIB
		./Rbenv-Ruby_Install_GitHub.sh
		source ~/.bashrc
	fi
}

MSFPSQL () {

	PSQLVRS=`psql --version | sed -e 's/\((U\).*\()\)/\1\2/'  | sed $'s/[^[:punct:][:digit:]\t]//g' | sed -e 's/()//g' | sed 's/.$//' |  sed 's/.$//'`
	# PSQLVRS=$(psql --version | sed -e 's/\((U\).*\()\)/\1\2/'  | sed $'s/[^[:punct:][:digit:]\t]//g' | sed -e 's/()//g' | sed 's/.$//' |  sed 's/.$//')

	sudo service postgresql start

	# Setup the ql postgresDB without userinteraction - unattended so that the main script is not interrupted.
	sudo -i -u $POSTGRES_USER << EOF
	createuser msf || true
	#psql -c "ALTER USER $MSFDBUSRNAME WITH ENCRYPTED PASSWORD 'msf';"
	psql -c "ALTER USER $MSFDBUSRNAME WITH PASSWORD '$MSFDBP';"
	createdb --owner=$MSFDBUSRNAME $MSFDBNAME || true

	#psql -c "ALTER USER $POSTGRES_USER WITH ENCRYPTED PASSWORD '$POSTGRES_PASS';"

	#echo "host    all    postgres    127.0.0.1/32    md5" > "/etc/postgresql/$PG_VER/main/pg_hba.conf"
	#echo "host    msf    msf    127.0.0.1/32    md5" >> "/etc/postgresql/$PG_VER/main/pg_hba.conf"

	#echo "localhost:5432:*:postgres:$POSTGRES_PASS" > ~/.pgpass
	#echo "localhost:5432:msf:msf:msf" >> ~/.pgpass
	#chmod 0600 ~/.pgpass

	echo "listen_addresses = 'localhost'" >> "/etc/postgresql/$PSQLVRS/main/postgresql.conf"

	exit
EOF

	sudo service postgresql stop

}

INSTNMAP () {

	if [[ ! -d /opt/ITSEC/1.Information-Gathering/1.Network_Portscanner/nmap/nmap/nmap ]]; then

		INSTALLNMAP () {
			git clone https://github.com/alphaaurigae/nmap_install
			cd nmap_install
			git checkout -b $DISTRIB
			./nmap-install.sh
		}
		INSTALLNMAP

	else 

		UPDATENMAP () {
			cd /opt/ITSEC/1.Information-Gathering/1.Network_Portscanner/nmap/nmap/nmap

			if git checkout master && git fetch origin master && [ `git rev-list HEAD...origin/master --count` != 0 ] && git merge origin/master
			then
				make clean
				git pull
				GITSBMDLINIT
				make -j 4
				sudo make install

			else
				echo "nmap up to date, nothing todo"
			fi
		}
		UPDATENMAP
		
	fi

}

INSTDEPS () {

	LIBS_DEPS="libpcap-dev 
	libpq5 
	libpq-dev 
	libreadline5 
	libreadline-dev 
	libsqlite3-dev 
	libssl-dev 
	libxml2-dev 
	libxslt1-dev 
	libyaml-dev 
	zlib1g-dev
	"
	PSQL_DEPS="pgadmin3 
	postgresql 
	postgresql-10 
	postgresql-client 
	postgresql-client-10
	postgresql-common
	postgresql-client-common
	"

	WEB_DEPS="apache2 
	apache2-utils 
	php
	php-mbstring 
	php-gettext 
	phppgadmin
	"

	sudo apt-get update
	sudo apt-get upgrade

	echo $LIBS_DEPS | while read libsdeps
	do
	   sudo apt-get install -y $libsdeps
	done
	echo $PSQL_DEPS | while read psqldeps
	do
	   sudo apt-get install -y $psqldeps
	done
	echo $WEB_DEPS | while read webdeps
	do
	   sudo apt-get install -y $webdeps
	done

	sudo service postgresql stop
	sudo systemctl disable postgresql.service

	sudo service apache2 stop
	sudo systemctl disable apache2.service

	sudo service php7.0-fpm stop
	sudo systemctl disable php7.0-fpm.service

	sudo updatedb
	sudo ldconfig
}

WRTEAPPFLS () {
	echo '#!/bin/bash 
	sudo service postgresql start
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	ruby -v
	rbenv sudo ./msfconsole "$@"' > $GITREPOROOT/$EXECUTEABLE1
	chmod +x $GITREPOROOT/$EXECUTEABLE1

	echo '#!/bin/bash 
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfd "$@"' > $GITREPOROOT/$EXECUTEABLE2
	chmod +x $GITREPOROOT/$EXECUTEABLE2

	echo '#!/bin/bash 
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfrpc "$@"' > $GITREPOROOT/$EXECUTEABLE3
	chmod +x $GITREPOROOT/$EXECUTEABLE3

	echo '#!/bin/bash 
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfrpcd "$@"' > $GITREPOROOT/$EXECUTEABLE4
	chmod +x $GITREPOROOT/$EXECUTEABLE4

	echo '#!/bin/bash
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfvenom "$@"' > $EXECUTEABLE5
	chmod +x $EXECUTEABLE5

	echo '#!/bin/bash
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfbinscan "$@"' > $GITREPOROOT/$EXECUTEABLE6
	chmod +x $GITREPOROOT/$EXECUTEABLE6

	echo '#!/bin/bash 
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfelfscan "$@"' > $EXECUTEABLE7
	chmod +x $EXECUTEABLE7

	echo '#!/bin/bash
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfmachscan "$@"' > $GITREPOROOT/$EXECUTEABLE8
	chmod +x $GITREPOROOT/$EXECUTEABLE8

	echo '#!/bin/bash
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	./msfpescan "$@"' > $GITREPOROOT/$EXECUTEABLE9
	chmod +x $GITREPOROOT/$EXECUTEABLE9

	echo '#!/bin/bash
	GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/metasploit-framework/rapid7/metasploit-framework
	cd $GITREPOROOT
	git submodule init
	git submodule update --recursive
	sudo updatedb && sudo ldconfig
	git pull
	gem install bundler
	bundle install
	 ' > $GITREPOROOT/$EXECUTEABLE10
	chmod +x $GITREPOROOT/$EXECUTEABLE10
}

SMLNK1 () {
	sudo rm -f $BINDIR/msf*
	sudo ln -s $GITREPOROOT/$EXECUTEABLE1 $BINDIR/$EXECUTEABLE11
	sudo ln -s $GITREPOROOT/$EXECUTEABLE2 $BINDIR/$EXECUTEABLE12
	sudo ln -s $GITREPOROOT/$EXECUTEABLE3 $BINDIR/$EXECUTEABLE13
	sudo ln -s $GITREPOROOT/$EXECUTEABLE4 $BINDIR/$EXECUTEABLE14
	sudo ln -s $GITREPOROOT/$EXECUTEABLE5 $BINDIR/$EXECUTEABLE15
	sudo ln -s $GITREPOROOT/$EXECUTEABLE6 $BINDIR/$EXECUTEABLE16
	sudo ln -s $GITREPOROOT/$EXECUTEABLE7 $BINDIR/$EXECUTEABLE17
	sudo ln -s $GITREPOROOT/$EXECUTEABLE8 $BINDIR/$EXECUTEABLE18
	sudo ln -s $GITREPOROOT/$EXECUTEABLE9 $BINDIR/$EXECUTEABLE19
	sudo ln -s $GITREPOROOT/$EXECUTEABLE10 $BINDIR/$EXECUTEABLE20
}

MSFCNFL () {
	cat > $GITREPOROOT/config/database.yml << EOF # # dont change the config file here, use functions ~ line 50 MSFDBNAME= OR use automatic pssword gen # Setup the ql postgresDB without userinteraction a
	production:
	    adapter: postgresql
	    database: msf
	    username: msf
	    password: msf
	    host: 127.0.0.1
	    port: 5432
	    pool: 75
	    timeout: 5
EOF
	sed -i -e 's/'"database: msf"'/'"database: $MSFDBNAME"'/g' $GITREPOROOT/config/database.yml
	sed -i -e 's/'"username: msf"'/'"username: $MSFDBUSRNAME"'/g' $GITREPOROOT/config/database.yml
	sed -i -e 's/'"password: msf"'/'"password: $MSFDBP"'/g' $GITREPOROOT/config/database.yml
}

MSFPRFL () {
	sudo sh -c "echo export MSF_DATABASE_CONFIG=$GITREPOROOT/config/database.yml >> /etc/profile"
	source /etc/profile
	sudo ldconfig
	sudo updatedb
}

RBENVSHLL1 () {
	RUBYVERSION=`cat $GITREPOROOT/.ruby-version` # desired ruby version if runs the test against.

	# Get if ruby $RUBYVERSION is installed. For this purpose we need to run "rbenv versions" and grep for $RUBYVERSION - if string is empty == not installed -> install. 
	# Additionally clean up the output so "test" command can read it.
	RUBYMATCH=`rbenv versions | grep $RUBYVERSION |  sed -e 's/\((set by \).*\(.ruby-version)\)/\1\2/' | sed -e 's/(set by .ruby-version)//g' | sed -e 's/*//g' | sed -e 's/ //g'`
	echo -e "is ${PURPLE}${bold} ruby $RUBYVERSION installed? If not, install!${normal}"
	source ~/.bashrc # no idea why its left here, check later

	if [[ $RUBYMATCH != $RUBYVERSION ]]; then # compare desired ruby with installed ruby, if no perfect match install it using rbenv or skip to proceed setup.
		echo "${bold} ruby $RUBYVERSION is not installed! Installing!${normal}"
		yes "Y" | rbenv install $RUBYVERSION
		sudo updatedb
		sudo ldconfig
	else
		echo "${bold} ruby $RUBYVERSION is installed! Skipping installation!${normal}"
	fi # check if ruby needs install and run rbenv shell w desired ruby version
}

WRTEDSKTPFLS () {
	mkdir -p $DSKTPFLSDEST

	echo '[Desktop Entry]
	Name=MSFconsole
	Encoding=UTF-8
	Exec=bash -ic "sudo service postgresql start && msfconsole;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL1

	echo '[Desktop Entry]
	Name=MSFbinscan 
	Encoding=UTF-8
	Exec=sh -c "msfbinscan;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL2

	echo '[Desktop Entry]
	Name=MSFelfscan
	Encoding=UTF-8
	Exec=sh -c "msfelfscan -h;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL3

	echo '[Desktop Entry]
	Name=MSFmachscan
	Encoding=UTF-8
	Exec=sh -c "msfmachscan -h;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL4

	echo '[Desktop Entry]
	Name=MSFpescan
	Encoding=UTF-8
	Exec=sh -c "msfpescan -h;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL5

	echo '[Desktop Entry]
	Name=MSFrop
	Encoding=UTF-8
	Exec=sh -c "msfrop -h;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL6

	echo '[Desktop Entry]
	Name=MSFvenom
	Encoding=UTF-8
	Exec=sh -c "msfvenom -h;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL7

	echo '[Desktop Entry]
	Name=MSFupdate git
	Encoding=UTF-8
	Exec=sh -ic "msfupdate;${SHELL:-bash}"
	StartupNotify=false
	Terminal=true
	Type=Application
	Categories=1.MSF;' > $DSKTPFLSDEST/$DSKTPFL8
}

GITCLONEFUNC () { # git clone
	mkdir -p $GITCLONEDIR
	cd $GITCLONEDIR
	git clone -b $BRANCH $GITREPO
	cd $GITREPOROOT
}

GITSBMDLINIT () { # init submodules
	git submodule init
	git submodule update --recursive
	sudo updatedb && sudo ldconfig
}

which msfconsole > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
	msfupdate && echo "${bold} metasploit-framework is installed! Skip installation, check for update!${normal}"
else

	BANNER && echo "${bold} metasploit-framework is not installed! Installing!${normal}"

	GITCLONEFUNC && GITSBMDLINIT && echo "... ${bold} git clone && submodule init ${normal}"

	INSTDEPS && echo "... ${bold} install apt-get deps ${normal}"

	RBENVINST && source ~/.bashrc && echo "... ${bold} rbenv setup ${normal}"

	MSFPSQL && echo "... ${bold} config psql ${normal}"

	INSTNMAP && echo "... ${bold} install nmap ${normal}"

	RBENVSHLL1 && echo "... ${bold} RBENV ruby setup ${normal}"

	gem install bundler && bundle install && echo "... ${bold} gem install bundler && bundle install ${normal}"

	WRTEAPPFLS && echo "... ${bold} write the app files ${normal}"

	SMLNK1 && echo "... ${bold} create symlinks ${normal}"

	rm -f $GITREPOROOT/config/database.yml && echo "... ${bold} rm old config file ${normal}"

	MSFCNFL && echo "... ${bold} create new config file ${normal}"

	MSFPRFL && echo "... ${bold} write config file location to etc profile ${normal}"

	echo "... ${bold} msfconsole version test ${normal}" && msfconsole --version

	sudo service postgresql stop

	WRTEDSKTPFLS && echo "... ${bold} copy desktop files ${normal}"

	echo -e "${bold} ${GREEN} Metasploit-Framework Setup COMPLETE! ${normal}"
	echo "${bold} Run msf* from console, its linked with rbenv - just type 'msfconsole'! ${normal}"
	echo "source ~/.bashrc if rbenv ruby missing"
	echo -e "${bold} ${GREEN} See console if errors else hf :) ${normal}"

fi

