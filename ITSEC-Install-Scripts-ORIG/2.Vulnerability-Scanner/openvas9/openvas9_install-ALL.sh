#!/bin/bash

## Openvas Setup - XFCE, 16.04
# install openvas9 off the http://www.openvas.org/install-source.html website.

######################## CONFIG_MAIN - START ########################

sudo chown -R $USER:$USER /opt

############################# VARIABLES START #############################
INSTALLDIR=/opt/ITSEC/2.Vulnerability-Scanner/openvas
SETUPFILESDIR=/opt/ownsec/ITSEC-Install-Scripts-ORIG/2.Vulnerability-Scanner/openvas-setup-files
#########SYMLINK
START_ALL=openvas-start_all.sh
STOP_ALL=openvas-stop_all.sh
CHECK_SET=openvas-checksetup.sh
GRNBNESYNC=openvas-update_all.sh
###
START_ALL_SYM=openvas-start_all
STOP_ALL_SYM=openvas-stop_all
CHECK_SET_SYM=openvas-checksetup
GRNBNESYNC_SYM=openvas-update_all

BINDIR=/usr/local/bin
#########SYMLINK END

#Install 
LIBRARIES=gvm-libs-9.0.2
LIBRARIESURL=https://github.com/greenbone/gvm-libs/releases/download/v9.0.2/openvas-libraries-9.0.2.tar.gz
SCANNER=openvas-scanner-5.1.2
SCANNERURL=https://github.com/greenbone/openvas-scanner/archive/v5.1.2.tar.gz
MANAGER=gvm-7.0.3
MANAGERURL=https://github.com/greenbone/gvm/releases/download/v7.0.3/openvas-manager-7.0.3.tar.gz
GSAD=gsa-7.0.3
GSADURL=https://github.com/greenbone/gsa/archive/v7.0.3.tar.gz
GVMTOOLS=gvm-tools-1.3.1
GVMTOOLSURL=https://github.com/greenbone/gvm-tools/archive/1.3.1.tar.gz
CLI=openvas-cli-1.4.5
CLIURL=http://wald.intevation.org/frs/download.php/2397/openvas-cli-1.4.5.tar.gz
SMB=openvas-smb-1.0.3
SMBURL=https://github.com/greenbone/openvas-smb/archive/v1.0.3.tar.gz
OSPD=ospd-1.2.0
OSPDURL=http://wald.intevation.org/frs/download.php/2401/ospd-1.2.0.tar.gz
DEBSECAN=ospd-debsecan-1.2b1
DEBSECANURL=http://wald.intevation.org/frs/download.php/2405/ospd-debsecan-1.2b1.tar.gz
NMAP=ospd-nmap-1.0b1
NMAPURL=http://wald.intevation.org/frs/download.php/2218/ospd-nmap-1.0b1.tar.gz

DSKTPFLSDEST=/home/$USER/.local/share/applications/2.Vulnerability-Scanner/openvas
DSKTPFL1=openvas-update_all.desktop
DSKTPFL2=openvas-start_all.desktop
DSKTPFL3=openvas-stop_all.desktop
DSKTPFL4=openvas-checksetup.desktop
############################# STATIC FUNCTIONS END #############################

######################## MISC - START ########################
# color
bold=$(tput bold)
normal=$(tput sgr0)
CYAN='\e[0;36m'
GREEN='\e[0;32m'
WHITE='\e[0;37m'
RED='\e[0;31m'
YELLOW='\e[0;33m'
BLUE='\e[0;34m'
PURPLE='\e[0;35m'
ORANGE='\e[38;5;166m'


######################## MISC - END ########################

############################# MAIN SETUP START #############################

mkdir -p $INSTALLDIR
cd $INSTALLDIR

BANNER (){
echo "${bold}$GREEN
  ___  ____  _____ _   ___     ___    ____     ___  
 / _ \|  _ \| ____| \ | \ \   / / \  / ___|   / _ \ 
| | | | |_) |  _| |  \| |\ \ / / _ \ \___ \  | (_) |
| |_| |  __/| |___| |\  | \ V / ___ \ ___) |  \__, |
 \___/|_|   |_____|_| \_|  \_/_/   \_\____/     /_/ 

INSTALL${normal} http://www.openvas.org/install-source.html

install script by alphaaurigae
${normal}"
}

INSTALLDEPS () {

MAIN_DEPS="alien
at 
autoconf 
bison 
build-essential 
checkinstall
cmake 
curl 
dctrl-tools 
debsecan  
devscripts 
doxygen  
dpatch 
dput 
gnutls-bin 
heimdal-dev 
heimdal-multidev  
mingw-w64
mingw-w64-common
mingw-w64-tools
nsis 
pkg-config 
quilt 
redis-server 
redis-tools
rpm 
rsync  
sqlfairy  
texlive-full 
texlive-latex-extra
uuid-dev 
wamerican 
wdiff 
xmltoman 
xsltproc
uuid"

WEB_DEPS="apache2
php7.0-fpm"

DB_DEPS="redis-server 
redis-tools
sqlite3"

PYTHON_DEPS="
python-dev
python-pip
python3-dev
python3-pip
python2.7 
python3-magic 
python-setuptools "

LIBS_DEPS="
libassuan-dev 
libdistro-info-perl
libgcrypt20-dev
libglib2.0-dev 
libgmp3-dev 
libgmp-dev 
libgnutls28-dev
libgpgme11 
libgpgme11-dev  
libhiredis-dev 
libjemalloc1 
libksba-dev 
libldap-2.4-2 
libldap2-dev 
libmicrohttpd-dev 
libpcap0.8 
libpcap0.8-dev 
libpcap-dev 
libpcre3-dev 
libpopt-dev 
libpth20 
libpth-dev  
libsnmp-dev 
libsqlite3-0 
libsqlite3-dev 
libssh2-1-dev 
libssh-dev 
libuuid1 
libwrap0-dev 
libxml2-dev 
libxslt1.1 
libxslt1-dev"


sudo apt-get update
sudo apt-get upgrade

# xargs -a <(awk '/^\s*[^#]/' "$APTLSTDIR/deps-openvas.txt") -r -- sudo apt-get install -y

echo $MAIN_DEPS | while read maindeps
do
   sudo apt-get install -y $maindeps
done

echo $WEB_DEPS | while read webdeps
do
   sudo apt-get install -y $webdeps
done

echo $DB_DEPS | while read dbdeps
do
   sudo apt-get install -y $dbdeps
done

echo $PYTHON_DEPS | while read pythondeps
do
   sudo apt-get install -y $pythondeps
done

echo $LIBS_DEPS | while read libsdeps
do
   sudo apt-get install -y $libsdeps
done

#xargs -a <(awk '/^\s*[^#]/' "$OPCSDPS") -r -- sudo apt-get install -y

sudo -H pip3 install paramiko lxml dialog
sudo updatedb
sudo ldconfig

sudo service apache2 stop
sudo systemctl disable apache2.service

sudo service php7.0-fpm stop
sudo systemctl disable php7.0-fpm.service

sudo service redis-server stop
sudo systemctl disable redis-server.service

sudo updatedb
sudo ldconfig

}

INSTNMAP () {
git clone -b xenial https://github.com/alphaaurigae/nmap_install
cd nmap_install
./nmap-install.sh
}

PRT2BUILD1 () {
#############################  STEP 2 - Load, Build and Install START #############################

echo "${bold}
wget, tar, build and install Openvas Libraries
${normal}"
	cd $INSTALLDIR
if [ ! -f "$INSTALLDIR/$LIBRARIES.tar.gz" ]; then
	wget -O $LIBRARIES.tar.gz $LIBRARIESURL
	tar xvfz $LIBRARIES.tar.gz
	cd $LIBRARIES
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$LIBRARIES exist - skip install"
fi

echo "${bold}
wget, tar, build and install Openvas Scanner
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$SCANNER.tar.gz ]; then
	wget -O $SCANNER.tar.gz $SCANNERURL
	tar xvfz $SCANNER.tar.gz
	cd $SCANNER
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$SCANNER exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas Manager
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$MANAGER.tar.gz ]; then
	wget -O $MANAGER.tar.gz $MANAGERURL
	tar xvfz $MANAGER.tar.gz
	cd $MANAGER
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$MANAGER exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas GSAD
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$GSAD.tar.gz ]; then
	wget -O $GSAD.tar.gz $GSADURL
	tar xvfz $GSAD.tar.gz
	cd $GSAD
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$GSAD exist - skip install"

fi

echo "${bold}
GVM-tools
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$GVMTOOLS.tar.gz ]; then
	wget -O $GVMTOOLS.tar.gz $GVMTOOLSURL
	tar xvfz $GVMTOOLS.tar.gz
	cd $GVMTOOLS
sudo python3 setup.py install
	sudo ldconfig
	sudo updatedb

else 

echo "$GVMTOOLS exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas CLI
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$CLI.tar.gz ]; then
	wget -O $CLI.tar.gz $CLIURL
	tar xvfz $CLI.tar.gz
	cd $CLI
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$CLI exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas plugin SMBURL
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$SMB.tar.gz ]; then
	wget -O $SMB.tar.gz $SMBURL
	tar xvfz $SMB.tar.gz
	cd $INSTALLDIR/$SMB
	# PATCH-HACK SOURCE http://lists.wald.intevation.org/pipermail/openvas-devel/2016-May/003712.html
	# PATCH-HACK Remove the line containing the string "gnutls_certificate_type_set_priority," by using:
	sed -i /gnutls_certificate_type_set_priority/d $INSTALLDIR/$SMB/samba/lib/tls/tls.c
	mkdir build
	cd build
	cmake ..
	make -j 4
	sudo make install
	sudo ldconfig
	sudo updatedb

else 

echo "$SMB exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas plugin OSPD
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$OSPD.tar.gz ]; then
	wget -O $OSPD.tar.gz $OSPDURL
	tar xvfz $OSPD.tar.gz
	cd $OSPD
	sudo python setup.py install
	sudo ldconfig
	sudo updatedb

else 

echo "$OSPD exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas plugin DEBSCAN
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$DEBSECAN.tar.gz ]; then
	wget -O $DEBSECAN.tar.gz $DEBSECANURL
	tar xvfz $DEBSECAN.tar.gz
	cd $DEBSECAN
	sudo python setup.py install
	sudo ldconfig
	sudo updatedb

else 

echo "$DEBSECAN exist - skip install"

fi

echo "${bold}
wget, tar, build and install Openvas plugin NMAPURL
${normal}"
	cd $INSTALLDIR
if [ ! -f $INSTALLDIR/$NMAP.tar.gz ]; then
	wget -O $NMAP.tar.gz $NMAPURL
	tar xvfz $NMAP.tar.gz
	cd $NMAP
	sudo python setup.py install
	sudo ldconfig
	sudo updatedb
	cd $INSTALLDIR

else 

echo "$NMAP exist - skip install"


fi
############################# STEP 2 - STEP 2 - Load, Build and Install END #############################
}

############################# STEP 3 - SERVICE SETUP AND UPDATE START #############################

REDISSOCK () {
#Fix redis.conf socket settings for openvas
#1.delete old entries
sudo sed -i.old '/^[#*-]\{0,1\}unixsocket/d' /etc/redis/redis.conf
#2.paste new settings
sudo echo '
unixsocket /var/run/redis/redis.sock
unixsocketperm 700' | sudo tee --append /etc/redis/redis.conf
}

SYMLNK () {

#Symlink 
#start all 
echo '
#!/bin/bash
sudo    mkdir /usr/local/var/run 2>/dev/null; 
sudo    mkdir /usr/local/var/run/openvasmd 2>/dev/null; 
sudo    touch /usr/local/var/run/openvasmd/openvasmd.pid;

sudo service redis-server start
sudo service apache2 start 
sudo service php7.0-fpm start
sudo openvassd
sudo openvasmd
sudo gsad

sudo netstat -antpl

' > $INSTALLDIR/$START_ALL

sudo rm -f $BINDIR/$START_ALL_SYM
sudo ln -s $INSTALLDIR/$START_ALL $BINDIR/$START_ALL_SYM
sudo chmod +x $INSTALLDIR/$START_ALL


#stop all
echo "
#!/bin/bash
ps aux | egrep '(openvas.d|gsad)' | awk '{print $2}' | sudo xargs -i kill -9 '{}'

sudo service redis-server stop
sudo service apache2 stop 
sudo service php7.0-fpm stop
" > $INSTALLDIR/$STOP_ALL
sed -i -e 's/{print /{print $2/g' $INSTALLDIR/$STOP_ALL

sudo rm -f $BINDIR/$STOP_ALL_SYM
sudo ln -s $INSTALLDIR/$STOP_ALL $BINDIR/$STOP_ALL_SYM
sudo chmod +x $INSTALLDIR/$STOP_ALL


#check setup
cd $INSTALLDIR

echo '
if [ ! -f $INSTALLDIR/openvas-check-setup.sh ]; then
wget --no-check-certificate -O openvas-check-setup.sh https://svn.wald.intevation.org/svn/openvas/trunk/tools/openvas-check-setup
fi
sudo chmod +x openvas-check-setup.sh
sudo ./openvas-check-setup.sh --v9
' > $INSTALLDIR/$CHECK_SET
 
sudo rm -f $BINDIR/$CHECK_SET_SYM
sudo ln -s $INSTALLDIR/$CHECK_SET $BINDIR/$CHECK_SET_SYM
sudo chmod +x $INSTALLDIR/$CHECK_SET


#check sync all
echo '
#!/bin/bash

openvas-start_all

echo "update openvas"
sudo greenbone-scapdata-sync
sudo greenbone-certdata-sync
sudo greenbone-nvt-sync 

openvas-stop_all
' >  $INSTALLDIR/$GRNBNESYNC

sudo rm -f $BINDIR/$GRNBNESYNC
sudo ln -s $INSTALLDIR/$GRNBNESYNC $BINDIR/$GRNBNESYNC_SYM
sudo chmod +x $INSTALLDIR/$GRNBNESYNC

}

RESTARTALL () {
## stop all- start 
ps aux | egrep '(openvas.d|gsad)' | awk '{print $2}' | sudo xargs -i kill -9 '{}'

sudo service redis-server stop
sudo service apache2 stop 
sudo service php7.0-fpm stop
## stop all - end

## start all - start
sudo    mkdir /usr/local/var/run 2>/dev/null; 
sudo    mkdir /usr/local/var/run/openvasmd 2>/dev/null; 
sudo    touch /usr/local/var/run/openvasmd/openvasmd.pid;

sudo service redis-server start
sudo service apache2 start 
sudo service php7.0-fpm start
sudo openvassd
sudo openvasmd

sudo gsad
## start all - end
}


OPENVASSDCONF () {
#Copy install repo openvassd.conf with REDIS socks settings to openvas installation.
echo 'kb_location=/var/run/redis/redis.sock' > openvassd.conf
sudo cp openvassd.conf /usr/local/etc/openvas/openvassd.conf
}

CREATECERTS () {
sudo openvas-manage-certs -a -f
}

CREATE_USER () {
#Delete old user, create new user and put pass in textfile
sudo openvasmd --delete-user=admin
sudo openvasmd --create-user=admin --role=Admin > $INSTALLDIR/admin.txt
}

GREENBONE_SYN () {
sudo greenbone-nvt-sync
sudo greenbone-scapdata-sync
sudo greenbone-certdata-sync
}

OPENVASMD_UPDATE () {
sudo openvasmd --update --progress
}

OPENVASMD_REBUILD () {
sudo openvasmd --rebuild --progress
}

OPENVAS_RESTARTALL () {
#Restart Services
sudo openvas-stop_all
sudo openvas-start_all
}

OPENVAS_RUNCHECKSET () {
#Check Installation
sudo openvas-checksetup
sudo ps aux | egrep "(openvas.d|gsad)"
}

CRTEDSKTFLS () {
mkdir -p $DSKTPFLSDEST

echo '
[Desktop Entry]
Name=openvas-update-all
Encoding=UTF-8
Exec=sh -c "openvas-update-all;${SHELL:-bash}"
Icon=
StartupNotify=false
Terminal=true
Type=Application
Categories=1.Openvas;
' > $DSKTPFLSDEST/$DSKTPFL1

echo '
[Desktop Entry]
Name=openvas-start
Encoding=UTF-8
Exec=sh -c "openvas-start_all;${SHELL:-bash}"
Icon=
StartupNotify=false
Terminal=true
Type=Application
Categories=1.Openvas;
' > $DSKTPFLSDEST/$DSKTPFL2

echo '
[Desktop Entry]
Name=openvas-stop
Encoding=UTF-8
Exec=sh -c "openvas-stop_all;${SHELL:-bash}"
Icon=
StartupNotify=false
Terminal=true
Type=Application
Categories=1.Openvas;
' > $DSKTPFLSDEST/$DSKTPFL3

echo ' 
[Desktop Entry]
Name=openvas check setup
Encoding=UTF-8
Exec=sudo "openvas9-checksetup;${SHELL:-bash}"
StartupNotify=false
Terminal=true
Type=Application
Categories=1.Openvas;
' > $DSKTPFLSDEST/$DSKTPFL4
}


FINISH_INST () {
#Installation User Info console output
echo "${bold}OPENVAS 9 ADMIN DASHBOARD https://127.0.0.1:9392${normal}"
echo "${bold}admin password at $INSTALLDIR/admin.txt ${normal}"
echo "STEP 3 - Service Setup and Update - COMPLETE ..."
echo "${bold}Installer Complete ... if it doesent work, read the console print :) ${normal}"
echo "${bold}If checksetup complains about permissions, do sudo ${normal}"
echo "${bold}If setup failed may rerun sudo "openvasmd --rebuild --progress" and the update ...${normal}"
echo "${bold} may also restart apache2, redis-server and php${normal}"
echo "made this script to save time - if it served you, share, improve, share again... opensource is awesome"
}




cd $INSTALLDIR

############################# STEP 3 - SERVICE SETUP AND UPDATE END #############################
#

############################# MAIN SETUP END #############################

# banner
BANNER

echo -e "${bold} ... install apt-get deps ${normal}"
INSTALLDEPS

echo -e "${bold} ... install nmap if it isnt installed ${normal}"
INSTNMAP

echo -e "${bold} ... load, build and install ${normal}"
PRT2BUILD1


echo -e "${bold} ... redis sock ${normal}"
REDISSOCK

echo -e "${bold} ... create executeable files & symlinks ${normal}"
SYMLNK

echo -e "${bold} ... create opessad.conf w redis sock ${normal}"
OPENVASSDCONF


echo -e "${bold} ... restart all openvas ${normal}"
RESTARTALL

echo -e "${bold} ... create certs ${normal}"
CREATECERTS

echo -e "${bold} ... create login user ${normal}"
CREATE_USER

echo -e "${bold} ... update openvasmd ${normal}"
OPENVASMD_UPDATE 
OPENVASMD_REBUILD 

echo -e "${bold} ... greenbone sync ${normal}"
GREENBONE_SYN

echo -e "${bold} ... restart all openvas ${normal}"
RESTARTALL

echo -e "${bold} ... check openvas install ${normal}"
OPENVAS_RUNCHECKSET

echo -e "${bold} ... create .desktop files ${normal}"
CRTEDSKTFLS


echo -e "${bold} ... stop apache, php & redis ${normal}"
openvas-stop_all

echo -e "${bold} ... finish install ${normal}"
FINISH_INST



############################# SETUP END #############################
